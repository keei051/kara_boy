import os
import asyncio
import json
import re
from datetime import datetime
from urllib.parse import quote, urlparse, parse_qs
from loguru import logger
import aiohttp
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import inspect
from functools import wraps
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger.add("bot.log", rotation="1 MB", encoding="utf-8")
logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ {datetime.now().strftime('%I:%M %p %Z, %d %B %Y')}")

# –¢–æ–∫–µ–Ω—ã (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–¥–µ, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ)
BOT_TOKEN = "7735071651:AAHVN_ZjYJ2NZRIzJXtvDfRIPUcZhPBqUEo"
VK_TOKEN = "4ccacfc94ccacfc94ccacfc9024fffb48c44cca4ccacfc924a94e533627dc4bbeb3ee97"

if not BOT_TOKEN or not VK_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    raise ValueError("BOT_TOKEN –∏ VK_TOKEN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è JSON
json_lock = threading.Lock()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class LinkForm(StatesGroup):
    waiting_for_link = State()
    waiting_for_title = State()
    waiting_for_link_action = State()
    waiting_for_rename = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
class JsonStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Å—ã–ª–æ–∫ –≤ JSON-—Ñ–∞–π–ª–µ —Å –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å—å—é."""
    def __init__(self, file_name="links.json"):
        self.file_name = file_name
        self.data = self._load_data()

    def _load_data(self):
        try:
            with open(self.file_name, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (UnicodeDecodeError, FileNotFoundError, json.JSONDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
            return {}

    def _save_data(self):
        with json_lock:
            try:
                with open(self.file_name, 'w', encoding='utf-8') as f:
                    json.dump(self.data, f, ensure_ascii=False, indent=2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON: {e}")
                raise

    def get_user_links(self, user_id):
        return self.data.get(str(user_id), [])

    def add_link(self, user_id, link_data):
        uid = str(user_id)
        with json_lock:
            self.data.setdefault(uid, [])
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
            if any(link['original'] == link_data['original'] for link in self.data[uid]):
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é —Å—Å—ã–ª–∫—É –¥–ª—è {uid}: {link_data['original']}")
                return False
            if len(self.data[uid]) >= 50:
                removed_link = self.data[uid].pop(0)
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è {uid}: {removed_link['title']}")
            self.data[uid].append(link_data)
            self._save_data()
            return True

    def delete_link(self, user_id, link_index):
        uid = str(user_id)
        with json_lock:
            if uid in self.data and 0 <= link_index < len(self.data[uid]):
                self.data[uid].pop(link_index)
                self._save_data()
                return True
        return False

    def rename_link(self, user_id, link_index, new_title):
        uid = str(user_id)
        with json_lock:
            if uid in self.data and 0 <= link_index < len(self.data[uid]):
                self.data[uid][link_index]["title"] = new_title[:100]
                self._save_data()
                return True
        return False

storage = JsonStorage()

# –û—á–∏—Å—Ç–∫–∞ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def sanitize_url(url):
    parsed = urlparse(url)
    query_params = parse_qs(parsed.query)
    sensitive_params = ['token', 'password', 'key']
    for param in sensitive_params:
        if param in query_params:
            query_params[param] = ['[REDACTED]']
    query = "&".join(f"{k}={v[0]}" for k, v in query_params.items()) if query_params else ""
    return parsed._replace(query=query).geturl()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
async def is_valid_url(url, session):
    sanitized_url = sanitize_url(url)
    if not re.match(r'^https?://[^\s]+$', url):
        logger.error(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL: {sanitized_url}")
        return False
    try:
        async with session.head(url, timeout=5) as r:
            if r.status in (200, 301, 302):
                return True
            elif r.status == 429:
                logger.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {sanitized_url}")
                return False
            return False
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL {sanitized_url}: {e}")
        return False
    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL {sanitized_url}")
        return False

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ VK API
async def shorten_link_vk(url, session):
    sanitized_url = sanitize_url(url)
    if len(url) > 2048:
        logger.error(f"URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {sanitized_url}")
        return None, None, "URL –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É (2048 —Å–∏–º–≤–æ–ª–æ–≤)"
    if not await is_valid_url(url, session):
        return None, None, "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π URL"
    encoded_url = quote(url, safe='')
    try:
        async with session.get(
            f"https://api.vk.com/method/utils.getShortLink?url={encoded_url}&v=5.199&access_token={VK_TOKEN}",
            timeout=5
        ) as resp:
            if resp.status != 200:
                logger.error(f"VK API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è {sanitized_url}")
                return None, None, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ VK"
            data = await resp.json()
            if not isinstance(data, dict):
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ VK API –¥–ª—è {sanitized_url}")
                return None, None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç VK API"
            if 'response' in data and 'short_url' in data['response']:
                return data['response']['short_url'], data['response']['key'], ""
            logger.error(f"–û—à–∏–±–∫–∞ VK API –¥–ª—è {sanitized_url}: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return None, None, "–û—à–∏–±–∫–∞ VK API"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ {sanitized_url}: {e}")
        return None, None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É"

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ
async def get_link_stats(key, session):
    params = {"access_token": VK_TOKEN, "key": key, "v": "5.199", "interval": "day", "extended": 1}
    try:
        async with session.get(
            "https://api.vk.com/method/utils.getLinkStats",
            params=params,
            timeout=5
        ) as resp:
            if resp.status != 200:
                logger.error(f"VK API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è –∫–ª—é—á–∞ {key}")
                return {"views": 0, "countries": {}}
            data = await resp.json()
            stats = {"views": 0, "countries": {}}
            if 'response' in data and 'stats' in data['response']:
                for day in data['response']['stats']:
                    stats["views"] += day.get("views", 0)
                    country_id = day.get("country")
                    if country_id:
                        stats["countries"][country_id] = stats["countries"].get(country_id, 0) + day.get("views", 0)
            return stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–ª—é—á–∞ {key}: {e}")
        return {"views": 0, "countries": {}}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω
async def get_country_name(country_id, session):
    try:
        async with session.get(
            f"https://api.vk.com/method/database.getCountriesById?country_ids={country_id}&v=5.199&access_token={VK_TOKEN}",
            timeout=5
        ) as resp:
            if resp.status != 200:
                logger.error(f"VK API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status} –¥–ª—è country_id {country_id}")
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞'
            data = await resp.json()
            if 'response' in data and data['response']:
                return data['response'][0].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞')
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã {country_id}: {e}")
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞'

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_kb(buttons, row=2):
    return InlineKeyboardMarkup(inline_keyboard=[buttons[i:i+row] for i in range(0, len(buttons), row)])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return make_kb([
        InlineKeyboardButton(text="üîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="add_link"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã
cancel_kb = make_kb([InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_error(handler):
    @wraps(handler)
    async def wrapper(*args, **kwargs):
        try:
            sig = inspect.signature(handler)
            filtered_kwargs = {k: v for k, v in kwargs.items() if k in sig.parameters}
            return await handler(*args, **filtered_kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ {handler.__name__}: {str(type(e).__name__)} - {str(e)[:100]}")
            text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            reply = get_main_menu()
            if isinstance(args[0], types.CallbackQuery):
                await args[0].message.edit_text(text, reply_markup=reply)
                await args[0].answer()
            elif isinstance(args[0], types.Message):
                await args[0].answer(text, reply_markup=reply)
    return wrapper

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(Command("start"))
@handle_error
async def cmd_start(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()
    start_message = "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã –º–æ–∂–µ—Ç–µ:\nüîó –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫–∏\nüìä –°–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    await message.answer(start_message, reply_markup=get_main_menu())

@router.message(Command("help"))
@handle_error
async def cmd_help(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()
    await message.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
        reply_markup=get_main_menu()
    )

@router.callback_query(lambda c: c.data == "cancel")
@handle_error
async def cancel_action(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
    await cb.answer()

@router.callback_query(lambda c: c.data == "add_link")
@handle_error
async def add_link(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text(
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (http:// –∏–ª–∏ https://):",
        reply_markup=cancel_kb
    )
    await state.set_state(LinkForm.waiting_for_link)
    await cb.answer()

@router.message(StateFilter(LinkForm.waiting_for_link))
@handle_error
async def process_link(message: types.Message, state: FSMContext, session: aiohttp.ClientSession):
    url = message.text.strip()
    if not await is_valid_url(url, session):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https:// –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.\n–ü—Ä–∏–º–µ—Ä: https://example.com",
            reply_markup=cancel_kb
        )
        return
    loading_msg = await message.answer('‚è≥ –°–æ–∫—Ä–∞—â–∞—é...')
    short_url, key, error_msg = await shorten_link_vk(url, session)
    await loading_msg.delete()
    if not short_url:
        await message.answer(f"‚ùå {error_msg}", reply_markup=cancel_kb)
        return
    await state.update_data(original=url, short=short_url, key=key)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=cancel_kb)
    await state.set_state(LinkForm.waiting_for_title)

@router.message(StateFilter(LinkForm.waiting_for_title))
@handle_error
async def process_title(message: types.Message, state: FSMContext):
    title = message.text.strip()[:100]
    if not title:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:", reply_markup=cancel_kb)
        return
    data = await state.get_data()
    uid = str(message.from_user.id)
    link_data = {
        "title": title,
        "short": data['short'],
        "original": data['original'],
        "key": data['key'],
        "created": datetime.now().isoformat()
    }
    if not storage.add_link(uid, link_data):
        await message.answer("‚ùå –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        await state.clear()
        return
    await message.answer(
        f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n<b>{title}</b>\n{data['short']}",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )
    await state.clear()

@router.callback_query(lambda c: c.data == "stats")
@handle_error
async def stats_menu(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    uid = str(cb.from_user.id)
    links = storage.get_user_links(uid)
    if not links:
        await cb.message.edit_text("üìã –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫", reply_markup=get_main_menu())
        await cb.answer()
        return
    buttons = [
        InlineKeyboardButton(text=f"{link['title']} ({link['short']})", callback_data=f"link_stats:{i}")
        for i, link in enumerate(links)
    ]
    buttons.append(InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    kb = make_kb(buttons, row=1)
    await cb.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
    await state.set_state(LinkForm.waiting_for_link_action)
    await cb.answer()

@router.callback_query(lambda c: c.data.startswith("link_stats:"))
@handle_error
async def show_link_stats(cb: types.CallbackQuery, state: FSMContext, session: aiohttp.ClientSession):
    link_index = int(cb.data.split(":")[1])
    uid = str(cb.from_user.id)
    links = storage.get_user_links(uid)
    if not (0 <= link_index < len(links)):
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_main_menu())
        await state.clear()
        await cb.answer()
        return
    link = links[link_index]
    loading_msg = await cb.message.edit_text('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')
    stats = await get_link_stats(link['key'], session)
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è '{link['title']}'\n\n"
    text += f"üîó –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: {link['short']}\n"
    text += f"üåê –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link['original']}\n"
    text += f"üëÅ –ü–µ—Ä–µ—Ö–æ–¥—ã: {stats['views']}\n"
    if stats['countries']:
        text += "\nüåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è (–ø–æ —Å—Ç—Ä–∞–Ω–∞–º):\n"
        for country_id, views in stats['countries'].items():
            country_name = await get_country_name(country_id, session)
            text += f"{country_name}: {views} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n"
    else:
        text += "\nüåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
    buttons = [
        InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="stats"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_link:{link_index}"),
        InlineKeyboardButton(text="‚úè –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_link:{link_index}")
    ]
    kb = make_kb(buttons, row=1)
    await loading_msg.delete()
    await cb.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await cb.answer()

@router.callback_query(lambda c: c.data.startswith("delete_link:"))
@handle_error
async def delete_link(cb: types.CallbackQuery, state: FSMContext):
    link_index = int(cb.data.split(":")[1])
    uid = str(cb.from_user.id)
    if storage.delete_link(uid, link_index):
        await cb.message.edit_text("‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=get_main_menu())
    else:
        await cb.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏", reply_markup=get_main_menu())
    await state.clear()
    await cb.answer()

@router.callback_query(lambda c: c.data.startswith("rename_link:"))
@handle_error
async def rename_link(cb: types.CallbackQuery, state: FSMContext):
    link_index = int(cb.data.split(":")[1])
    uid = str(cb.from_user.id)
    links = storage.get_user_links(uid)
    if not (0 <= link_index < len(links)):
        await cb.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_main_menu())
        await state.clear()
        await cb.answer()
        return
    await state.update_data(link_index=link_index)
    await cb.message.edit_text("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=cancel_kb)
    await state.set_state(LinkForm.waiting_for_rename)
    await cb.answer()

@router.message(StateFilter(LinkForm.waiting_for_rename))
@handle_error
async def process_rename(message: types.Message, state: FSMContext):
    new_title = message.text.strip()[:100]
    if not new_title:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:", reply_markup=cancel_kb)
        return
    data = await state.get_data()
    link_index = data.get("link_index")
    uid = str(message.from_user.id)
    if storage.rename_link(uid, link_index, new_title):
        links = storage.get_user_links(uid)
        link = links[link_index]
        await message.answer(
            f"‚úÖ –°—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n<b>{new_title}</b>\n{link['short']}",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏", reply_markup=get_main_menu())
    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    async with aiohttp.ClientSession() as session:
        bot.session = session  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –æ–±—ä–µ–∫—Ç–µ –±–æ—Ç–∞
        max_attempts = 5
        for attempt in range(max_attempts):
            try:
                await bot.delete_webhook(drop_pending_updates=True)
                logger.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                dp.include_router(router)
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º polling")
                await dp.start_polling(bot, polling_timeout=20, handle_as_tasks=False)
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): {str(type(e).__name__)} - {str(e)[:100]}")
                if attempt < max_attempts - 1:
                    await asyncio.sleep(5)
                else:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
                    raise

if __name__ == "__main__":
    import sys
    logger.info(f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ stdout: {sys.stdout.encoding}")
    asyncio.run(main())
